@model ClientMVC.Models.BandIndex



<h1> Find bands </h1>

@{
    ViewBag.Title = "Search";
}

<div class="row">
    <div class="col-12">
        <form method="get">
            <div class="form-group">
                <input type="checkbox" id="dist-checkbox" class="checkbox-inline" onchange="toggleDistanceFilter()" />
                <label for="distance" id="dist-label" class="text-muted">
                    Maximum distance:
                    <span id="dist-val"></span>
                </label>
                <input type="range" min="1" max="100" value="50" class="form-control-range" id="dist-slider"
                       name="distance" oninput="showDistance(event)" disabled>
            </div>
            <div class="row form-group">
                <div class="col-md-12">
                    <input type="hidden" id="marker-lat" name="markerLat" />
                    <input type="hidden" id="marker-lng" name="markerLng" />
                    <div id="map"></div>
                </div>
            </div>
            <div class="form-group form-inline">
                <input type="text" name="Search" class="form-control" value="@Model.Search" />
                <button type="submit" class="btn btn-primary">Search</button>
            </div>
        </form>
    </div>
</div>

<h3>Bands</h3>
<style>
    table, tr, td, th {
        border: 2px solid black;
    }

    tr {
        cursor: pointer;
    }
</style>
<table class="table table-striped">
    <tbody>
        @if (Model.Bands.Count == 0)
        {
            <tr>
                <td colspan="1">No bands found.</td>
            </tr>
        }
        else
        {
            foreach (var item in Model.Bands)
            {

                <div class="card">
                    <div class="card-body">
                        <h3 style="color:darkblue">@item.Name </h3>
                        <p></p>
                        <span style="color:dodgerblue"> Description: </span> <p>  @item.Description</p>
                        <p>
                            <span style="color:dodgerblue"> Genre:</span>@foreach (var genre in item.Genres)
                            {<ul><li>@genre.Name</li></ul>}
                        </p>
                        <div class="row">
                            <p>
                                <button onclick="location.href = '@Url.Action("Show", new {id = item.ID})'" type="button" class="btn btn-primary mr-2">Show </button>
                            </p>
                            @{
                                var i = 0;
                                
                                foreach(var bandUser in item.BandUsers)
                                {
                                    if(bandUser.BandID == item.ID && bandUser.UserID == Model.User.ID)
                                    {
                                        i--;
                                    }
                                }
                                foreach (var application in item.Applications)
                                {
                                    if (application.UserID != Model.User.ID)
                                    {
                                        i++;
                                    }
                                }
                                if (i == item.Applications.Count)
                                {

                                    <form class="form-inline" action="~/application/apply" method="post" name="frm" onsubmit="return checkMessage();">
                                        <input type="hidden" name="userID" value="@Session["ID"]" />
                                        <input type="hidden" name="bandID" value="@item.ID" />
                                        <input type="hidden" name="message" id="message" value="" />
                                        <p>
                                            <button type="submit" class="btn btn-primary" onclick="setMessage()">Apply</button>
                                        </p>
                                    </form>
                                }
                            }
                        </div>
                    </div>
                </div>

            }
        }

    </tbody>
</table>

@section scripts{
    <style>
        #map {
            height: 500px;
            width: 100%;
        }
    </style>

    <script type="text/javascript">
        function setMessage() {
            var messageInput = document.getElementById("message");
            var apply = prompt("Enter your message");
            if (!apply) {
                return;
            }
            messageInput.value = apply;
        }

        function checkMessage() {
            return document.getElementById("message").value != "";
        }
    </script>

    <script src="~/Scripts/map.js"></script>

    <script type="text/javascript">
        var distanceCheckbox = document.getElementById('dist-checkbox');
        var distanceText = document.getElementById('dist-val');
        var distanceLabel = document.getElementById('dist-label');
        var distanceSlider = document.getElementById('dist-slider');

        if ("@Model.DistanceEnabled" == "True") {
            distanceCheckbox.setAttribute("checked", "true");
            distanceLabel.classList.remove("text-muted");
            distanceText.innerText = @Model.Distance + " km";
            distanceSlider.removeAttribute('disabled');
            distanceSlider.value = @Model.Distance;
        }

        function showDistance(event) {
            distanceText.innerText = event.target.value + " km";
        }

        function toggleDistanceFilter() {
            if (distanceSlider.hasAttribute('disabled')) {
                distanceSlider.removeAttribute('disabled');
                distanceLabel.classList.remove("text-muted");
                distanceText.innerText = distanceSlider.value + " km";
            } else {
                distanceSlider.setAttribute("disabled", "disabled");
                distanceLabel.classList.add("text-muted");
                distanceText.innerText = "";
            }
        }


    </script>



    <script src="https://maps.googleapis.com/maps/api/js?key=@System.Configuration.ConfigurationManager.AppSettings["GoogleMapsAPI"]&callback=initMarkerMap" async defer></script>
}