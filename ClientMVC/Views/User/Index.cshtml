@model ClientMVC.Models.UserIndex

<h1> Find musicians </h1>

@{ 
    ViewBag.Title = "Search";
}

<form method="get">
    <div class="form-group">
        <input type="checkbox" id="dist-checkbox" class="checkbox-inline" onchange="toggleDistanceFilter()" />
        <label for="distance" id="dist-label" class="text-muted">Maximum distance: 
        <span id="dist-val"></span></label>
        <input type="range" min="1" max="100" value="50" class="form-control-range" id="dist-slider" 
               name="distance" oninput="showDistance(event)" disabled>
    </div>
    <div class="row form-group">
        <div class="col-md-6">
            <input type="hidden" id="marker-lat" name="markerLat" />
            <input type="hidden" id="marker-lng" name="markerLng" />
            <div id="map"></div>
        </div>
    </div>
    <div class="form-group form-inline">
        <input type="text" name="Search" class="form-control" value="@Model.Search" />
        <button type="submit" class="btn btn-primary">Search</button>
    </div>
</form>

<h3>Users</h3>
<table class="table table-striped">
    <tbody>
        @if (Model.Users.Count() == 0)
        {
            <tr>
                <td colspan="1">No users found.</td>
            </tr>
        }
        else
        {
            foreach (var item in Model.Users)
            {
                <tr>
                    <td>
                        <b>@item.FirstName @item.LastName</b>
                        <p></p>
                        <p>@item.Username</p>
                        <p>@item.Email</p>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@section scripts{
    <style>
        #map {
            height: 500px;
            width: 100%;
        }
    </style>

    <script src="~/Scripts/map.js"></script>

    <script type="text/javascript">
        var distanceCheckbox = document.getElementById('dist-checkbox');
        var distanceText = document.getElementById('dist-val');
        var distanceLabel = document.getElementById('dist-label');
        var distanceSlider = document.getElementById('dist-slider');

        if ("@Model.DistanceEnabled" == "True") {
            distanceCheckbox.setAttribute("checked", "true");
            distanceLabel.classList.remove("text-muted");
            distanceText.innerText = @Model.Distance + " km";
            distanceSlider.removeAttribute('disabled');
            distanceSlider.value = @Model.Distance;
        }

        function showDistance(event) {
            distanceText.innerText = event.target.value + " km";
        }        

        function toggleDistanceFilter() {
            if (distanceSlider.hasAttribute('disabled')) {
                distanceSlider.removeAttribute('disabled');
                distanceLabel.classList.remove("text-muted");
                distanceText.innerText = distanceSlider.value + " km";
            } else {
                distanceSlider.setAttribute("disabled", "disabled");
                distanceLabel.classList.add("text-muted");
                distanceText.innerText = "";
            }
        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=@System.Configuration.ConfigurationManager.AppSettings["GoogleMapsAPI"]&callback=initMarkerMap" async defer></script>
}